/**
 * Migration: Current Database Schema (v20240807)
 * Matches the template database structure from the existing app
 */

export const currentSchema = {
  name: '002-current-schema',
  description: 'Current database schema matching template_DB_v20240807.db',
  sql: `
    -- PATIENT_DIMENSION - Core patient information
    CREATE TABLE IF NOT EXISTS PATIENT_DIMENSION (
      PATIENT_NUM INTEGER UNIQUE,
      PATIENT_CD TEXT UNIQUE,
      VITAL_STATUS_CD TEXT,
      BIRTH_DATE NUMERIC,
      DEATH_DATE NUMERIC,
      AGE_IN_YEARS NUMERIC,
      SEX_CD TEXT,
      LANGUAGE_CD TEXT,
      RACE_CD TEXT,
      MARITAL_STATUS_CD TEXT,
      RELIGION_CD TEXT,
      STATECITYZIP_PATH TEXT,
      PATIENT_BLOB BLOB,
      UPDATE_DATE TEXT,
      DOWNLOAD_DATE TEXT,
      IMPORT_DATE TEXT,
      SOURCESYSTEM_CD TEXT,
      UPLOAD_ID NUMERIC,
      CREATED_AT TEXT,
      UPDATED_AT TEXT,
      PRIMARY KEY(PATIENT_NUM AUTOINCREMENT)
    );

    -- VISIT_DIMENSION - Patient encounters/visits
    CREATE TABLE IF NOT EXISTS VISIT_DIMENSION (
      ENCOUNTER_NUM INTEGER UNIQUE,
      PATIENT_NUM NUMERIC,
      ACTIVE_STATUS_CD TEXT,
      START_DATE NUMERIC,
      END_DATE NUMERIC,
      INOUT_CD TEXT,
      LOCATION_CD TEXT,
      VISIT_BLOB BLOB,
      UPDATE_DATE TEXT,
      DOWNLOAD_DATE TEXT,
      IMPORT_DATE TEXT,
      SOURCESYSTEM_CD TEXT,
      UPLOAD_ID NUMERIC,
      PRIMARY KEY(ENCOUNTER_NUM AUTOINCREMENT),
      FOREIGN KEY (PATIENT_NUM) REFERENCES PATIENT_DIMENSION(PATIENT_NUM) ON DELETE CASCADE ON UPDATE NO ACTION
    );

    -- PROVIDER_DIMENSION - Healthcare providers
    CREATE TABLE IF NOT EXISTS PROVIDER_DIMENSION (
      PROVIDER_ID TEXT,
      PROVIDER_PATH TEXT,
      NAME_CHAR TEXT,
      CONCEPT_BLOB BLOB,
      UPDATE_DATE TEXT,
      DOWNLOAD_DATE TEXT,
      IMPORT_DATE TEXT,
      SOURCESYSTEM_CD TEXT,
      UPLOAD_ID NUMERIC,
      PRIMARY KEY (PROVIDER_ID)
    );

    -- CONCEPT_DIMENSION - Medical concepts (SNOMED/LOINC)
    CREATE TABLE IF NOT EXISTS CONCEPT_DIMENSION (
      CONCEPT_PATH TEXT,
      CONCEPT_CD TEXT UNIQUE,
      NAME_CHAR TEXT NOT NULL,
      VALTYPE_CD TEXT,
      UNIT_CD TEXT,
      RELATED_CONCEPT TEXT,
      CONCEPT_BLOB BLOB,
      UPDATE_DATE TEXT,
      DOWNLOAD_DATE TEXT,
      IMPORT_DATE TEXT,
      SOURCESYSTEM_CD TEXT,
      UPLOAD_ID NUMERIC,
      CATEGORY_CHAR TEXT,
      PRIMARY KEY (CONCEPT_CD)
    );

    -- CODE_LOOKUP - Reference data and lookups
    CREATE TABLE IF NOT EXISTS CODE_LOOKUP (
      TABLE_CD TEXT DEFAULT NULL,
      COLUMN_CD TEXT DEFAULT NULL,
      CODE_CD TEXT UNIQUE,
      NAME_CHAR TEXT DEFAULT NULL,
      LOOKUP_BLOB BLOB DEFAULT NULL,
      UPDATE_DATE TEXT DEFAULT NULL,
      DOWNLOAD_DATE TEXT DEFAULT NULL,
      IMPORT_DATE TEXT DEFAULT NULL,
      SOURCESYSTEM_CD TEXT DEFAULT NULL,
      UPLOAD_ID NUMERIC DEFAULT NULL,
      PRIMARY KEY (CODE_CD)
    );

    -- OBSERVATION_FACT - Clinical observations and measurements
    CREATE TABLE IF NOT EXISTS OBSERVATION_FACT (
      OBSERVATION_ID INTEGER,
      ENCOUNTER_NUM INTEGER NOT NULL,
      PATIENT_NUM INTEGER NOT NULL,
      CATEGORY_CHAR TEXT,
      CONCEPT_CD TEXT,
      PROVIDER_ID TEXT,
      START_DATE TEXT,
      INSTANCE_NUM NUMERIC,
      VALTYPE_CD TEXT,
      TVAL_CHAR TEXT,
      NVAL_NUM NUMERIC,
      VALUEFLAG_CD TEXT,
      QUANTITY_NUM TEXT,
      UNIT_CD TEXT,
      END_DATE NUMERIC,
      LOCATION_CD TEXT,
      CONFIDENCE_NUM TEXT,
      OBSERVATION_BLOB BLOB,
      UPDATE_DATE TEXT,
      DOWNLOAD_DATE TEXT,
      IMPORT_DATE TEXT,
      SOURCESYSTEM_CD TEXT,
      UPLOAD_ID NUMERIC,
      PRIMARY KEY(OBSERVATION_ID AUTOINCREMENT),
      FOREIGN KEY (CONCEPT_CD) REFERENCES CONCEPT_DIMENSION(CONCEPT_CD) ON DELETE CASCADE ON UPDATE NO ACTION,
      FOREIGN KEY (ENCOUNTER_NUM) REFERENCES VISIT_DIMENSION(ENCOUNTER_NUM) ON DELETE CASCADE ON UPDATE NO ACTION,
      FOREIGN KEY (PATIENT_NUM) REFERENCES PATIENT_DIMENSION(PATIENT_NUM) ON DELETE CASCADE ON UPDATE NO ACTION
    );

    -- USER_MANAGEMENT - User authentication and permissions
    CREATE TABLE IF NOT EXISTS USER_MANAGEMENT (
      USER_ID INTEGER UNIQUE,
      COLUMN_CD TEXT,
      USER_CD TEXT UNIQUE,
      NAME_CHAR TEXT,
      PASSWORD_CHAR TEXT,
      USER_BLOB TEXT,
      UPDATE_DATE TEXT,
      DOWNLOAD_DATE TEXT,
      IMPORT_DATE TEXT,
      UPLOAD_ID NUMERIC,
      PRIMARY KEY(USER_ID AUTOINCREMENT)
    );

    -- USER_PATIENT_LOOKUP - User-patient access control
    CREATE TABLE IF NOT EXISTS USER_PATIENT_LOOKUP (
      USER_PATIENT_ID INTEGER UNIQUE,
      USER_ID INTEGER NOT NULL,
      PATIENT_NUM INTEGER NOT NULL,
      NAME_CHAR TEXT,
      USER_PATIENT_BLOB TEXT,
      UPDATE_DATE TEXT,
      DOWNLOAD_DATE TEXT,
      IMPORT_DATE TEXT,
      UPLOAD_ID NUMERIC,
      FOREIGN KEY (PATIENT_NUM) REFERENCES PATIENT_DIMENSION(PATIENT_NUM),
      FOREIGN KEY (USER_ID) REFERENCES USER_MANAGEMENT(USER_ID),
      PRIMARY KEY(USER_PATIENT_ID AUTOINCREMENT)
    );

    -- CQL_FACT - Clinical Quality Language rules
    CREATE TABLE IF NOT EXISTS CQL_FACT (
      CQL_ID INTEGER UNIQUE,
      CODE_CD TEXT,
      NAME_CHAR TEXT,
      CQL_CHAR BLOB,
      JSON_CHAR BLOB,
      CQL_BLOB BLOB,
      UPDATE_DATE TEXT,
      IMPORT_DATE TEXT,
      DOWNLOAD_DATE TEXT,
      UPLOAD_ID NUMERIC,
      PRIMARY KEY(CQL_ID AUTOINCREMENT)
    );

    -- CONCEPT_CQL_LOOKUP - Concept-rule mappings
    CREATE TABLE IF NOT EXISTS CONCEPT_CQL_LOOKUP (
      CONCEPT_CQL_ID INTEGER,
      CONCEPT_CD TEXT NOT NULL,
      CQL_ID INTEGER NOT NULL,
      NAME_CHAR TEXT,
      RULE_BLOB TEXT,
      UPDATE_DATE TEXT,
      DOWNLOAD_DATE TEXT,
      IMPORT_DATE TEXT,
      UPLOAD_ID NUMERIC,
      FOREIGN KEY (CONCEPT_CD) REFERENCES CONCEPT_DIMENSION(CONCEPT_CD),
      FOREIGN KEY (CQL_ID) REFERENCES CQL_FACT(CQL_ID),
      PRIMARY KEY(CONCEPT_CQL_ID AUTOINCREMENT)
    );

    -- NOTE_FACT - Clinical notes and documentation
    CREATE TABLE IF NOT EXISTS NOTE_FACT (
      NOTE_ID INTEGER UNIQUE,
      CATEGORY_CHAR TEXT,
      NAME_CHAR TEXT,
      NOTE_BLOB TEXT,
      UPDATE_DATE TEXT,
      DOWNLOAD_DATE TEXT,
      IMPORT_DATE TEXT,
      UPLOAD_ID NUMERIC,
      PRIMARY KEY(NOTE_ID AUTOINCREMENT)
    );

    -- Create indexes for better performance
    CREATE INDEX IF NOT EXISTS idx_patient_patient_cd ON PATIENT_DIMENSION(PATIENT_CD);
    CREATE INDEX IF NOT EXISTS idx_patient_vital_status ON PATIENT_DIMENSION(VITAL_STATUS_CD);
    CREATE INDEX IF NOT EXISTS idx_patient_sex ON PATIENT_DIMENSION(SEX_CD);
    CREATE INDEX IF NOT EXISTS idx_patient_age ON PATIENT_DIMENSION(AGE_IN_YEARS);
    CREATE INDEX IF NOT EXISTS idx_patient_birth_date ON PATIENT_DIMENSION(BIRTH_DATE);
    
    CREATE INDEX IF NOT EXISTS idx_visit_patient_num ON VISIT_DIMENSION(PATIENT_NUM);
    CREATE INDEX IF NOT EXISTS idx_visit_start_date ON VISIT_DIMENSION(START_DATE);
    CREATE INDEX IF NOT EXISTS idx_visit_location ON VISIT_DIMENSION(LOCATION_CD);
    
    CREATE INDEX IF NOT EXISTS idx_observation_patient_num ON OBSERVATION_FACT(PATIENT_NUM);
    CREATE INDEX IF NOT EXISTS idx_observation_encounter_num ON OBSERVATION_FACT(ENCOUNTER_NUM);
    CREATE INDEX IF NOT EXISTS idx_observation_concept_cd ON OBSERVATION_FACT(CONCEPT_CD);
    CREATE INDEX IF NOT EXISTS idx_observation_start_date ON OBSERVATION_FACT(START_DATE);
    
    CREATE INDEX IF NOT EXISTS idx_concept_concept_cd ON CONCEPT_DIMENSION(CONCEPT_CD);
    CREATE INDEX IF NOT EXISTS idx_concept_path ON CONCEPT_DIMENSION(CONCEPT_PATH);
    CREATE INDEX IF NOT EXISTS idx_concept_category ON CONCEPT_DIMENSION(CATEGORY_CHAR);
    
    CREATE INDEX IF NOT EXISTS idx_user_user_cd ON USER_MANAGEMENT(USER_CD);
    CREATE INDEX IF NOT EXISTS idx_user_patient_user_id ON USER_PATIENT_LOOKUP(USER_ID);
    CREATE INDEX IF NOT EXISTS idx_user_patient_patient_num ON USER_PATIENT_LOOKUP(PATIENT_NUM);
  `,
}
